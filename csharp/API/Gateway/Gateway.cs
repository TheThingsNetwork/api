// <auto-generated>
//     Generated by the protocol buffer compiler.  DO NOT EDIT!
//     source: github.com/TheThingsNetwork/api/gateway/gateway.proto
// </auto-generated>
#pragma warning disable 1591, 0612, 3021
#region Designer generated code

using pb = global::Google.Protobuf;
using pbc = global::Google.Protobuf.Collections;
using pbr = global::Google.Protobuf.Reflection;
using scg = global::System.Collections.Generic;
namespace TheThingsNetwork.API.Gateway {

  /// <summary>Holder for reflection information generated from github.com/TheThingsNetwork/api/gateway/gateway.proto</summary>
  public static partial class GatewayReflection {

    #region Descriptor
    /// <summary>File descriptor for github.com/TheThingsNetwork/api/gateway/gateway.proto</summary>
    public static pbr::FileDescriptor Descriptor {
      get { return descriptor; }
    }
    private static pbr::FileDescriptor descriptor;

    static GatewayReflection() {
      byte[] descriptorData = global::System.Convert.FromBase64String(
          string.Concat(
            "CjVnaXRodWIuY29tL1RoZVRoaW5nc05ldHdvcmsvYXBpL2dhdGV3YXkvZ2F0",
            "ZXdheS5wcm90bxIHZ2F0ZXdheRotZ2l0aHViLmNvbS9nb2dvL3Byb3RvYnVm",
            "L2dvZ29wcm90by9nb2dvLnByb3RvIvkBChBMb2NhdGlvbk1ldGFkYXRhEgwK",
            "BHRpbWUYASABKAMSEAoIbGF0aXR1ZGUYAiABKAISEQoJbG9uZ2l0dWRlGAMg",
            "ASgCEhAKCGFsdGl0dWRlGAQgASgFEhAKCGFjY3VyYWN5GAUgASgFEjgKBnNv",
            "dXJjZRgGIAEoDjIoLmdhdGV3YXkuTG9jYXRpb25NZXRhZGF0YS5Mb2NhdGlv",
            "blNvdXJjZSJUCg5Mb2NhdGlvblNvdXJjZRILCgdVTktOT1dOEAASBwoDR1BT",
            "EAESCgoGQ09ORklHEAISDAoIUkVHSVNUUlkQAxISCg5JUF9HRU9MT0NBVElP",
            "ThAEIsUECgpSeE1ldGFkYXRhEiEKCmdhdGV3YXlfaWQYASABKAlCDeLeHwlH",
            "YXRld2F5SUQSFwoPZ2F0ZXdheV90cnVzdGVkGAIgASgIEhEKCXRpbWVzdGFt",
            "cBgLIAEoDRIMCgR0aW1lGAwgASgDEhYKDmVuY3J5cHRlZF90aW1lGA0gASgM",
            "EhAKCHJmX2NoYWluGBUgASgNEg8KB2NoYW5uZWwYFiABKA0SLQoIYW50ZW5u",
            "YXMYHiADKAsyGy5nYXRld2F5LlJ4TWV0YWRhdGEuQW50ZW5uYRIRCglmcmVx",
            "dWVuY3kYHyABKAQSFgoEcnNzaRggIAEoAkII4t4fBFJTU0kSFAoDc25yGCEg",
            "ASgCQgfi3h8DU05SEisKCGxvY2F0aW9uGCkgASgLMhkuZ2F0ZXdheS5Mb2Nh",
            "dGlvbk1ldGFkYXRhGoECCgdBbnRlbm5hEg8KB2FudGVubmEYASABKA0SDwoH",
            "Y2hhbm5lbBgCIAEoDRIWCgRyc3NpGAMgASgCQgji3h8EUlNTSRIlCgxjaGFu",
            "bmVsX3Jzc2kYBSABKAJCD+LeHwtDaGFubmVsUlNTSRI6Chdyc3NpX3N0YW5k",
            "YXJkX2RldmlhdGlvbhgGIAEoAkIZ4t4fFVJTU0lTdGFuZGFyZERldmlhdGlv",
            "bhIYChBmcmVxdWVuY3lfb2Zmc2V0GAcgASgDEhQKA3NuchgEIAEoAkIH4t4f",
            "A1NOUhIWCg5lbmNyeXB0ZWRfdGltZRgKIAEoDBIRCglmaW5lX3RpbWUYCyAB",
            "KAMilQEKD1R4Q29uZmlndXJhdGlvbhIRCgl0aW1lc3RhbXAYCyABKA0SEAoI",
            "cmZfY2hhaW4YFSABKA0SEQoJZnJlcXVlbmN5GBYgASgEEg0KBXBvd2VyGBcg",
            "ASgFEh4KFnBvbGFyaXphdGlvbl9pbnZlcnNpb24YHyABKAgSGwoTZnJlcXVl",
            "bmN5X2RldmlhdGlvbhggIAEoDSLDBQoGU3RhdHVzEhEKCXRpbWVzdGFtcBgB",
            "IAEoDRIMCgR0aW1lGAIgASgDEhcKD2dhdGV3YXlfdHJ1c3RlZBgDIAEoCBIR",
            "Cglib290X3RpbWUYBCABKAMSEgoCaXAYCyADKAlCBuLeHwJJUBIQCghwbGF0",
            "Zm9ybRgMIAEoCRIVCg1jb250YWN0X2VtYWlsGA0gASgJEhMKC2Rlc2NyaXB0",
            "aW9uGA4gASgJEhYKDmZyZXF1ZW5jeV9wbGFuGA8gASgJEg4KBmJyaWRnZRgQ",
            "IAEoCRIOCgZyb3V0ZXIYESABKAkSFgoEZnBnYRgSIAEoDUII4t4fBEZQR0ES",
            "FAoDZHNwGBMgASgNQgfi3h8DRFNQEhQKA2hhbBgUIAEoCUIH4t4fA0hBTBIr",
            "Cghsb2NhdGlvbhgVIAEoCzIZLmdhdGV3YXkuTG9jYXRpb25NZXRhZGF0YRIU",
            "CgNydHQYHyABKA1CB+LeHwNSVFQSDQoFcnhfaW4YKSABKA0SDQoFcnhfb2sY",
            "KiABKA0SDQoFdHhfaW4YKyABKA0SDQoFdHhfb2sYLCABKA0SDQoFbG1fb2sY",
            "LSABKA0SDQoFbG1fc3QYLiABKA0SDQoFbG1fbncYLyABKA0SFwoFbF9wcHMY",
            "MCABKA1CCOLeHwRMUFBTEi0KAm9zGDMgASgLMhkuZ2F0ZXdheS5TdGF0dXMu",
            "T1NNZXRyaWNzQgbi3h8CT1MSEAoIbWVzc2FnZXMYNCADKAkalwEKCU9TTWV0",
            "cmljcxIOCgZsb2FkXzEYASABKAISDgoGbG9hZF81GAIgASgCEg8KB2xvYWRf",
            "MTUYAyABKAISKQoOY3B1X3BlcmNlbnRhZ2UYCyABKAJCEeLeHw1DUFVQZXJj",
            "ZW50YWdlEhkKEW1lbW9yeV9wZXJjZW50YWdlGBUgASgCEhMKC3RlbXBlcmF0",
            "dXJlGB8gASgCQnoKIG9yZy50aGV0aGluZ3NuZXR3b3JrLmFwaS5nYXRld2F5",
            "QgxHYXRld2F5UHJvdG9QAVonZ2l0aHViLmNvbS9UaGVUaGluZ3NOZXR3b3Jr",
            "L2FwaS9nYXRld2F5qgIcVGhlVGhpbmdzTmV0d29yay5BUEkuR2F0ZXdheWIG",
            "cHJvdG8z"));
      descriptor = pbr::FileDescriptor.FromGeneratedCode(descriptorData,
          new pbr::FileDescriptor[] { },
          new pbr::GeneratedClrTypeInfo(null, null, new pbr::GeneratedClrTypeInfo[] {
            new pbr::GeneratedClrTypeInfo(typeof(global::TheThingsNetwork.API.Gateway.LocationMetadata), global::TheThingsNetwork.API.Gateway.LocationMetadata.Parser, new[]{ "Time", "Latitude", "Longitude", "Altitude", "Accuracy", "Source" }, null, new[]{ typeof(global::TheThingsNetwork.API.Gateway.LocationMetadata.Types.LocationSource) }, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::TheThingsNetwork.API.Gateway.RxMetadata), global::TheThingsNetwork.API.Gateway.RxMetadata.Parser, new[]{ "GatewayId", "GatewayTrusted", "Timestamp", "Time", "EncryptedTime", "RfChain", "Channel", "Antennas", "Frequency", "Rssi", "Snr", "Location" }, null, null, null, new pbr::GeneratedClrTypeInfo[] { new pbr::GeneratedClrTypeInfo(typeof(global::TheThingsNetwork.API.Gateway.RxMetadata.Types.Antenna), global::TheThingsNetwork.API.Gateway.RxMetadata.Types.Antenna.Parser, new[]{ "Antenna_", "Channel", "Rssi", "ChannelRssi", "RssiStandardDeviation", "FrequencyOffset", "Snr", "EncryptedTime", "FineTime" }, null, null, null, null)}),
            new pbr::GeneratedClrTypeInfo(typeof(global::TheThingsNetwork.API.Gateway.TxConfiguration), global::TheThingsNetwork.API.Gateway.TxConfiguration.Parser, new[]{ "Timestamp", "RfChain", "Frequency", "Power", "PolarizationInversion", "FrequencyDeviation" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::TheThingsNetwork.API.Gateway.Status), global::TheThingsNetwork.API.Gateway.Status.Parser, new[]{ "Timestamp", "Time", "GatewayTrusted", "BootTime", "Ip", "Platform", "ContactEmail", "Description", "FrequencyPlan", "Bridge", "Router", "Fpga", "Dsp", "Hal", "Location", "Rtt", "RxIn", "RxOk", "TxIn", "TxOk", "LmOk", "LmSt", "LmNw", "LPps", "Os", "Messages" }, null, null, null, new pbr::GeneratedClrTypeInfo[] { new pbr::GeneratedClrTypeInfo(typeof(global::TheThingsNetwork.API.Gateway.Status.Types.OSMetrics), global::TheThingsNetwork.API.Gateway.Status.Types.OSMetrics.Parser, new[]{ "Load1", "Load5", "Load15", "CpuPercentage", "MemoryPercentage", "Temperature" }, null, null, null, null)})
          }));
    }
    #endregion

  }
  #region Messages
  public sealed partial class LocationMetadata : pb::IMessage<LocationMetadata> {
    private static readonly pb::MessageParser<LocationMetadata> _parser = new pb::MessageParser<LocationMetadata>(() => new LocationMetadata());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<LocationMetadata> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::TheThingsNetwork.API.Gateway.GatewayReflection.Descriptor.MessageTypes[0]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public LocationMetadata() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public LocationMetadata(LocationMetadata other) : this() {
      time_ = other.time_;
      latitude_ = other.latitude_;
      longitude_ = other.longitude_;
      altitude_ = other.altitude_;
      accuracy_ = other.accuracy_;
      source_ = other.source_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public LocationMetadata Clone() {
      return new LocationMetadata(this);
    }

    /// <summary>Field number for the "time" field.</summary>
    public const int TimeFieldNumber = 1;
    private long time_;
    /// <summary>
    /// Time (unix nanoseconds)
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public long Time {
      get { return time_; }
      set {
        time_ = value;
      }
    }

    /// <summary>Field number for the "latitude" field.</summary>
    public const int LatitudeFieldNumber = 2;
    private float latitude_;
    /// <summary>
    /// the northâ€“south position (degrees; -90 to +90), where 0 is the equator, north pole is positive, south pole is negative
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public float Latitude {
      get { return latitude_; }
      set {
        latitude_ = value;
      }
    }

    /// <summary>Field number for the "longitude" field.</summary>
    public const int LongitudeFieldNumber = 3;
    private float longitude_;
    /// <summary>
    /// the east-west position (degrees; -180 to +180), where 0 is the Prime Meridian (Greenwich), east is positive , west is negative
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public float Longitude {
      get { return longitude_; }
      set {
        longitude_ = value;
      }
    }

    /// <summary>Field number for the "altitude" field.</summary>
    public const int AltitudeFieldNumber = 4;
    private int altitude_;
    /// <summary>
    /// the altitude (meters), where 0 is the mean sea level
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Altitude {
      get { return altitude_; }
      set {
        altitude_ = value;
      }
    }

    /// <summary>Field number for the "accuracy" field.</summary>
    public const int AccuracyFieldNumber = 5;
    private int accuracy_;
    /// <summary>
    /// the accuracy of the location (meters)
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Accuracy {
      get { return accuracy_; }
      set {
        accuracy_ = value;
      }
    }

    /// <summary>Field number for the "source" field.</summary>
    public const int SourceFieldNumber = 6;
    private global::TheThingsNetwork.API.Gateway.LocationMetadata.Types.LocationSource source_ = global::TheThingsNetwork.API.Gateway.LocationMetadata.Types.LocationSource.Unknown;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::TheThingsNetwork.API.Gateway.LocationMetadata.Types.LocationSource Source {
      get { return source_; }
      set {
        source_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as LocationMetadata);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(LocationMetadata other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Time != other.Time) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.Equals(Latitude, other.Latitude)) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.Equals(Longitude, other.Longitude)) return false;
      if (Altitude != other.Altitude) return false;
      if (Accuracy != other.Accuracy) return false;
      if (Source != other.Source) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Time != 0L) hash ^= Time.GetHashCode();
      if (Latitude != 0F) hash ^= pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.GetHashCode(Latitude);
      if (Longitude != 0F) hash ^= pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.GetHashCode(Longitude);
      if (Altitude != 0) hash ^= Altitude.GetHashCode();
      if (Accuracy != 0) hash ^= Accuracy.GetHashCode();
      if (Source != global::TheThingsNetwork.API.Gateway.LocationMetadata.Types.LocationSource.Unknown) hash ^= Source.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Time != 0L) {
        output.WriteRawTag(8);
        output.WriteInt64(Time);
      }
      if (Latitude != 0F) {
        output.WriteRawTag(21);
        output.WriteFloat(Latitude);
      }
      if (Longitude != 0F) {
        output.WriteRawTag(29);
        output.WriteFloat(Longitude);
      }
      if (Altitude != 0) {
        output.WriteRawTag(32);
        output.WriteInt32(Altitude);
      }
      if (Accuracy != 0) {
        output.WriteRawTag(40);
        output.WriteInt32(Accuracy);
      }
      if (Source != global::TheThingsNetwork.API.Gateway.LocationMetadata.Types.LocationSource.Unknown) {
        output.WriteRawTag(48);
        output.WriteEnum((int) Source);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Time != 0L) {
        size += 1 + pb::CodedOutputStream.ComputeInt64Size(Time);
      }
      if (Latitude != 0F) {
        size += 1 + 4;
      }
      if (Longitude != 0F) {
        size += 1 + 4;
      }
      if (Altitude != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Altitude);
      }
      if (Accuracy != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Accuracy);
      }
      if (Source != global::TheThingsNetwork.API.Gateway.LocationMetadata.Types.LocationSource.Unknown) {
        size += 1 + pb::CodedOutputStream.ComputeEnumSize((int) Source);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(LocationMetadata other) {
      if (other == null) {
        return;
      }
      if (other.Time != 0L) {
        Time = other.Time;
      }
      if (other.Latitude != 0F) {
        Latitude = other.Latitude;
      }
      if (other.Longitude != 0F) {
        Longitude = other.Longitude;
      }
      if (other.Altitude != 0) {
        Altitude = other.Altitude;
      }
      if (other.Accuracy != 0) {
        Accuracy = other.Accuracy;
      }
      if (other.Source != global::TheThingsNetwork.API.Gateway.LocationMetadata.Types.LocationSource.Unknown) {
        Source = other.Source;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            Time = input.ReadInt64();
            break;
          }
          case 21: {
            Latitude = input.ReadFloat();
            break;
          }
          case 29: {
            Longitude = input.ReadFloat();
            break;
          }
          case 32: {
            Altitude = input.ReadInt32();
            break;
          }
          case 40: {
            Accuracy = input.ReadInt32();
            break;
          }
          case 48: {
            Source = (global::TheThingsNetwork.API.Gateway.LocationMetadata.Types.LocationSource) input.ReadEnum();
            break;
          }
        }
      }
    }

    #region Nested types
    /// <summary>Container for nested types declared in the LocationMetadata message type.</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static partial class Types {
      public enum LocationSource {
        /// <summary>
        /// The source of the location is not known or not set
        /// </summary>
        [pbr::OriginalName("UNKNOWN")] Unknown = 0,
        /// <summary>
        /// The location is determined by GPS
        /// </summary>
        [pbr::OriginalName("GPS")] Gps = 1,
        /// <summary>
        /// The location is fixed by configuration
        /// </summary>
        [pbr::OriginalName("CONFIG")] Config = 2,
        /// <summary>
        /// The location is set in and updated from a registry
        /// </summary>
        [pbr::OriginalName("REGISTRY")] Registry = 3,
        /// <summary>
        /// The location is estimated with IP Geolocation
        /// </summary>
        [pbr::OriginalName("IP_GEOLOCATION")] IpGeolocation = 4,
      }

    }
    #endregion

  }

  public sealed partial class RxMetadata : pb::IMessage<RxMetadata> {
    private static readonly pb::MessageParser<RxMetadata> _parser = new pb::MessageParser<RxMetadata>(() => new RxMetadata());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<RxMetadata> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::TheThingsNetwork.API.Gateway.GatewayReflection.Descriptor.MessageTypes[1]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public RxMetadata() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public RxMetadata(RxMetadata other) : this() {
      gatewayId_ = other.gatewayId_;
      gatewayTrusted_ = other.gatewayTrusted_;
      timestamp_ = other.timestamp_;
      time_ = other.time_;
      encryptedTime_ = other.encryptedTime_;
      rfChain_ = other.rfChain_;
      channel_ = other.channel_;
      antennas_ = other.antennas_.Clone();
      frequency_ = other.frequency_;
      rssi_ = other.rssi_;
      snr_ = other.snr_;
      location_ = other.location_ != null ? other.location_.Clone() : null;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public RxMetadata Clone() {
      return new RxMetadata(this);
    }

    /// <summary>Field number for the "gateway_id" field.</summary>
    public const int GatewayIdFieldNumber = 1;
    private string gatewayId_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string GatewayId {
      get { return gatewayId_; }
      set {
        gatewayId_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "gateway_trusted" field.</summary>
    public const int GatewayTrustedFieldNumber = 2;
    private bool gatewayTrusted_;
    /// <summary>
    /// Indicates whether the gateway is trusted. Components that are able to verify gateway trust MUST do so and set this value accordingly
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool GatewayTrusted {
      get { return gatewayTrusted_; }
      set {
        gatewayTrusted_ = value;
      }
    }

    /// <summary>Field number for the "timestamp" field.</summary>
    public const int TimestampFieldNumber = 11;
    private uint timestamp_;
    /// <summary>
    /// Timestamp (uptime of LoRa module) in microseconds with rollover
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint Timestamp {
      get { return timestamp_; }
      set {
        timestamp_ = value;
      }
    }

    /// <summary>Field number for the "time" field.</summary>
    public const int TimeFieldNumber = 12;
    private long time_;
    /// <summary>
    /// Time in Unix nanoseconds
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public long Time {
      get { return time_; }
      set {
        time_ = value;
      }
    }

    /// <summary>Field number for the "encrypted_time" field.</summary>
    public const int EncryptedTimeFieldNumber = 13;
    private pb::ByteString encryptedTime_ = pb::ByteString.Empty;
    /// <summary>
    /// Encrypted time from the Gateway FPGA
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pb::ByteString EncryptedTime {
      get { return encryptedTime_; }
      set {
        encryptedTime_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "rf_chain" field.</summary>
    public const int RfChainFieldNumber = 21;
    private uint rfChain_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint RfChain {
      get { return rfChain_; }
      set {
        rfChain_ = value;
      }
    }

    /// <summary>Field number for the "channel" field.</summary>
    public const int ChannelFieldNumber = 22;
    private uint channel_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint Channel {
      get { return channel_; }
      set {
        channel_ = value;
      }
    }

    /// <summary>Field number for the "antennas" field.</summary>
    public const int AntennasFieldNumber = 30;
    private static readonly pb::FieldCodec<global::TheThingsNetwork.API.Gateway.RxMetadata.Types.Antenna> _repeated_antennas_codec
        = pb::FieldCodec.ForMessage(242, global::TheThingsNetwork.API.Gateway.RxMetadata.Types.Antenna.Parser);
    private readonly pbc::RepeatedField<global::TheThingsNetwork.API.Gateway.RxMetadata.Types.Antenna> antennas_ = new pbc::RepeatedField<global::TheThingsNetwork.API.Gateway.RxMetadata.Types.Antenna>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::TheThingsNetwork.API.Gateway.RxMetadata.Types.Antenna> Antennas {
      get { return antennas_; }
    }

    /// <summary>Field number for the "frequency" field.</summary>
    public const int FrequencyFieldNumber = 31;
    private ulong frequency_;
    /// <summary>
    /// Frequency in Hz
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ulong Frequency {
      get { return frequency_; }
      set {
        frequency_ = value;
      }
    }

    /// <summary>Field number for the "rssi" field.</summary>
    public const int RssiFieldNumber = 32;
    private float rssi_;
    /// <summary>
    /// Received signal strength in dBm
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public float Rssi {
      get { return rssi_; }
      set {
        rssi_ = value;
      }
    }

    /// <summary>Field number for the "snr" field.</summary>
    public const int SnrFieldNumber = 33;
    private float snr_;
    /// <summary>
    /// Signal-to-noise-ratio in dB
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public float Snr {
      get { return snr_; }
      set {
        snr_ = value;
      }
    }

    /// <summary>Field number for the "location" field.</summary>
    public const int LocationFieldNumber = 41;
    private global::TheThingsNetwork.API.Gateway.LocationMetadata location_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::TheThingsNetwork.API.Gateway.LocationMetadata Location {
      get { return location_; }
      set {
        location_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as RxMetadata);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(RxMetadata other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (GatewayId != other.GatewayId) return false;
      if (GatewayTrusted != other.GatewayTrusted) return false;
      if (Timestamp != other.Timestamp) return false;
      if (Time != other.Time) return false;
      if (EncryptedTime != other.EncryptedTime) return false;
      if (RfChain != other.RfChain) return false;
      if (Channel != other.Channel) return false;
      if(!antennas_.Equals(other.antennas_)) return false;
      if (Frequency != other.Frequency) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.Equals(Rssi, other.Rssi)) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.Equals(Snr, other.Snr)) return false;
      if (!object.Equals(Location, other.Location)) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (GatewayId.Length != 0) hash ^= GatewayId.GetHashCode();
      if (GatewayTrusted != false) hash ^= GatewayTrusted.GetHashCode();
      if (Timestamp != 0) hash ^= Timestamp.GetHashCode();
      if (Time != 0L) hash ^= Time.GetHashCode();
      if (EncryptedTime.Length != 0) hash ^= EncryptedTime.GetHashCode();
      if (RfChain != 0) hash ^= RfChain.GetHashCode();
      if (Channel != 0) hash ^= Channel.GetHashCode();
      hash ^= antennas_.GetHashCode();
      if (Frequency != 0UL) hash ^= Frequency.GetHashCode();
      if (Rssi != 0F) hash ^= pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.GetHashCode(Rssi);
      if (Snr != 0F) hash ^= pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.GetHashCode(Snr);
      if (location_ != null) hash ^= Location.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (GatewayId.Length != 0) {
        output.WriteRawTag(10);
        output.WriteString(GatewayId);
      }
      if (GatewayTrusted != false) {
        output.WriteRawTag(16);
        output.WriteBool(GatewayTrusted);
      }
      if (Timestamp != 0) {
        output.WriteRawTag(88);
        output.WriteUInt32(Timestamp);
      }
      if (Time != 0L) {
        output.WriteRawTag(96);
        output.WriteInt64(Time);
      }
      if (EncryptedTime.Length != 0) {
        output.WriteRawTag(106);
        output.WriteBytes(EncryptedTime);
      }
      if (RfChain != 0) {
        output.WriteRawTag(168, 1);
        output.WriteUInt32(RfChain);
      }
      if (Channel != 0) {
        output.WriteRawTag(176, 1);
        output.WriteUInt32(Channel);
      }
      antennas_.WriteTo(output, _repeated_antennas_codec);
      if (Frequency != 0UL) {
        output.WriteRawTag(248, 1);
        output.WriteUInt64(Frequency);
      }
      if (Rssi != 0F) {
        output.WriteRawTag(133, 2);
        output.WriteFloat(Rssi);
      }
      if (Snr != 0F) {
        output.WriteRawTag(141, 2);
        output.WriteFloat(Snr);
      }
      if (location_ != null) {
        output.WriteRawTag(202, 2);
        output.WriteMessage(Location);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (GatewayId.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(GatewayId);
      }
      if (GatewayTrusted != false) {
        size += 1 + 1;
      }
      if (Timestamp != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(Timestamp);
      }
      if (Time != 0L) {
        size += 1 + pb::CodedOutputStream.ComputeInt64Size(Time);
      }
      if (EncryptedTime.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeBytesSize(EncryptedTime);
      }
      if (RfChain != 0) {
        size += 2 + pb::CodedOutputStream.ComputeUInt32Size(RfChain);
      }
      if (Channel != 0) {
        size += 2 + pb::CodedOutputStream.ComputeUInt32Size(Channel);
      }
      size += antennas_.CalculateSize(_repeated_antennas_codec);
      if (Frequency != 0UL) {
        size += 2 + pb::CodedOutputStream.ComputeUInt64Size(Frequency);
      }
      if (Rssi != 0F) {
        size += 2 + 4;
      }
      if (Snr != 0F) {
        size += 2 + 4;
      }
      if (location_ != null) {
        size += 2 + pb::CodedOutputStream.ComputeMessageSize(Location);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(RxMetadata other) {
      if (other == null) {
        return;
      }
      if (other.GatewayId.Length != 0) {
        GatewayId = other.GatewayId;
      }
      if (other.GatewayTrusted != false) {
        GatewayTrusted = other.GatewayTrusted;
      }
      if (other.Timestamp != 0) {
        Timestamp = other.Timestamp;
      }
      if (other.Time != 0L) {
        Time = other.Time;
      }
      if (other.EncryptedTime.Length != 0) {
        EncryptedTime = other.EncryptedTime;
      }
      if (other.RfChain != 0) {
        RfChain = other.RfChain;
      }
      if (other.Channel != 0) {
        Channel = other.Channel;
      }
      antennas_.Add(other.antennas_);
      if (other.Frequency != 0UL) {
        Frequency = other.Frequency;
      }
      if (other.Rssi != 0F) {
        Rssi = other.Rssi;
      }
      if (other.Snr != 0F) {
        Snr = other.Snr;
      }
      if (other.location_ != null) {
        if (location_ == null) {
          Location = new global::TheThingsNetwork.API.Gateway.LocationMetadata();
        }
        Location.MergeFrom(other.Location);
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            GatewayId = input.ReadString();
            break;
          }
          case 16: {
            GatewayTrusted = input.ReadBool();
            break;
          }
          case 88: {
            Timestamp = input.ReadUInt32();
            break;
          }
          case 96: {
            Time = input.ReadInt64();
            break;
          }
          case 106: {
            EncryptedTime = input.ReadBytes();
            break;
          }
          case 168: {
            RfChain = input.ReadUInt32();
            break;
          }
          case 176: {
            Channel = input.ReadUInt32();
            break;
          }
          case 242: {
            antennas_.AddEntriesFrom(input, _repeated_antennas_codec);
            break;
          }
          case 248: {
            Frequency = input.ReadUInt64();
            break;
          }
          case 261: {
            Rssi = input.ReadFloat();
            break;
          }
          case 269: {
            Snr = input.ReadFloat();
            break;
          }
          case 330: {
            if (location_ == null) {
              Location = new global::TheThingsNetwork.API.Gateway.LocationMetadata();
            }
            input.ReadMessage(Location);
            break;
          }
        }
      }
    }

    #region Nested types
    /// <summary>Container for nested types declared in the RxMetadata message type.</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static partial class Types {
      public sealed partial class Antenna : pb::IMessage<Antenna> {
        private static readonly pb::MessageParser<Antenna> _parser = new pb::MessageParser<Antenna>(() => new Antenna());
        private pb::UnknownFieldSet _unknownFields;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public static pb::MessageParser<Antenna> Parser { get { return _parser; } }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public static pbr::MessageDescriptor Descriptor {
          get { return global::TheThingsNetwork.API.Gateway.RxMetadata.Descriptor.NestedTypes[0]; }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        pbr::MessageDescriptor pb::IMessage.Descriptor {
          get { return Descriptor; }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public Antenna() {
          OnConstruction();
        }

        partial void OnConstruction();

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public Antenna(Antenna other) : this() {
          antenna_ = other.antenna_;
          channel_ = other.channel_;
          rssi_ = other.rssi_;
          channelRssi_ = other.channelRssi_;
          rssiStandardDeviation_ = other.rssiStandardDeviation_;
          frequencyOffset_ = other.frequencyOffset_;
          snr_ = other.snr_;
          encryptedTime_ = other.encryptedTime_;
          fineTime_ = other.fineTime_;
          _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public Antenna Clone() {
          return new Antenna(this);
        }

        /// <summary>Field number for the "antenna" field.</summary>
        public const int Antenna_FieldNumber = 1;
        private uint antenna_;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public uint Antenna_ {
          get { return antenna_; }
          set {
            antenna_ = value;
          }
        }

        /// <summary>Field number for the "channel" field.</summary>
        public const int ChannelFieldNumber = 2;
        private uint channel_;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public uint Channel {
          get { return channel_; }
          set {
            channel_ = value;
          }
        }

        /// <summary>Field number for the "rssi" field.</summary>
        public const int RssiFieldNumber = 3;
        private float rssi_;
        /// <summary>
        /// Received signal power in dBm
        /// </summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public float Rssi {
          get { return rssi_; }
          set {
            rssi_ = value;
          }
        }

        /// <summary>Field number for the "channel_rssi" field.</summary>
        public const int ChannelRssiFieldNumber = 5;
        private float channelRssi_;
        /// <summary>
        /// Received channel power in dBm
        /// </summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public float ChannelRssi {
          get { return channelRssi_; }
          set {
            channelRssi_ = value;
          }
        }

        /// <summary>Field number for the "rssi_standard_deviation" field.</summary>
        public const int RssiStandardDeviationFieldNumber = 6;
        private float rssiStandardDeviation_;
        /// <summary>
        /// Standard deviation of the RSSI
        /// </summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public float RssiStandardDeviation {
          get { return rssiStandardDeviation_; }
          set {
            rssiStandardDeviation_ = value;
          }
        }

        /// <summary>Field number for the "frequency_offset" field.</summary>
        public const int FrequencyOffsetFieldNumber = 7;
        private long frequencyOffset_;
        /// <summary>
        /// Frequency offset (Hz)
        /// </summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public long FrequencyOffset {
          get { return frequencyOffset_; }
          set {
            frequencyOffset_ = value;
          }
        }

        /// <summary>Field number for the "snr" field.</summary>
        public const int SnrFieldNumber = 4;
        private float snr_;
        /// <summary>
        /// Signal-to-noise-ratio in dB
        /// </summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public float Snr {
          get { return snr_; }
          set {
            snr_ = value;
          }
        }

        /// <summary>Field number for the "encrypted_time" field.</summary>
        public const int EncryptedTimeFieldNumber = 10;
        private pb::ByteString encryptedTime_ = pb::ByteString.Empty;
        /// <summary>
        /// Encrypted fine timestamp from the Gateway FPGA
        /// </summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public pb::ByteString EncryptedTime {
          get { return encryptedTime_; }
          set {
            encryptedTime_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
          }
        }

        /// <summary>Field number for the "fine_time" field.</summary>
        public const int FineTimeFieldNumber = 11;
        private long fineTime_;
        /// <summary>
        /// Fine timestamp from the Gateway FPGA (decrypted)
        /// </summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public long FineTime {
          get { return fineTime_; }
          set {
            fineTime_ = value;
          }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override bool Equals(object other) {
          return Equals(other as Antenna);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public bool Equals(Antenna other) {
          if (ReferenceEquals(other, null)) {
            return false;
          }
          if (ReferenceEquals(other, this)) {
            return true;
          }
          if (Antenna_ != other.Antenna_) return false;
          if (Channel != other.Channel) return false;
          if (!pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.Equals(Rssi, other.Rssi)) return false;
          if (!pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.Equals(ChannelRssi, other.ChannelRssi)) return false;
          if (!pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.Equals(RssiStandardDeviation, other.RssiStandardDeviation)) return false;
          if (FrequencyOffset != other.FrequencyOffset) return false;
          if (!pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.Equals(Snr, other.Snr)) return false;
          if (EncryptedTime != other.EncryptedTime) return false;
          if (FineTime != other.FineTime) return false;
          return Equals(_unknownFields, other._unknownFields);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override int GetHashCode() {
          int hash = 1;
          if (Antenna_ != 0) hash ^= Antenna_.GetHashCode();
          if (Channel != 0) hash ^= Channel.GetHashCode();
          if (Rssi != 0F) hash ^= pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.GetHashCode(Rssi);
          if (ChannelRssi != 0F) hash ^= pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.GetHashCode(ChannelRssi);
          if (RssiStandardDeviation != 0F) hash ^= pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.GetHashCode(RssiStandardDeviation);
          if (FrequencyOffset != 0L) hash ^= FrequencyOffset.GetHashCode();
          if (Snr != 0F) hash ^= pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.GetHashCode(Snr);
          if (EncryptedTime.Length != 0) hash ^= EncryptedTime.GetHashCode();
          if (FineTime != 0L) hash ^= FineTime.GetHashCode();
          if (_unknownFields != null) {
            hash ^= _unknownFields.GetHashCode();
          }
          return hash;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override string ToString() {
          return pb::JsonFormatter.ToDiagnosticString(this);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void WriteTo(pb::CodedOutputStream output) {
          if (Antenna_ != 0) {
            output.WriteRawTag(8);
            output.WriteUInt32(Antenna_);
          }
          if (Channel != 0) {
            output.WriteRawTag(16);
            output.WriteUInt32(Channel);
          }
          if (Rssi != 0F) {
            output.WriteRawTag(29);
            output.WriteFloat(Rssi);
          }
          if (Snr != 0F) {
            output.WriteRawTag(37);
            output.WriteFloat(Snr);
          }
          if (ChannelRssi != 0F) {
            output.WriteRawTag(45);
            output.WriteFloat(ChannelRssi);
          }
          if (RssiStandardDeviation != 0F) {
            output.WriteRawTag(53);
            output.WriteFloat(RssiStandardDeviation);
          }
          if (FrequencyOffset != 0L) {
            output.WriteRawTag(56);
            output.WriteInt64(FrequencyOffset);
          }
          if (EncryptedTime.Length != 0) {
            output.WriteRawTag(82);
            output.WriteBytes(EncryptedTime);
          }
          if (FineTime != 0L) {
            output.WriteRawTag(88);
            output.WriteInt64(FineTime);
          }
          if (_unknownFields != null) {
            _unknownFields.WriteTo(output);
          }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public int CalculateSize() {
          int size = 0;
          if (Antenna_ != 0) {
            size += 1 + pb::CodedOutputStream.ComputeUInt32Size(Antenna_);
          }
          if (Channel != 0) {
            size += 1 + pb::CodedOutputStream.ComputeUInt32Size(Channel);
          }
          if (Rssi != 0F) {
            size += 1 + 4;
          }
          if (ChannelRssi != 0F) {
            size += 1 + 4;
          }
          if (RssiStandardDeviation != 0F) {
            size += 1 + 4;
          }
          if (FrequencyOffset != 0L) {
            size += 1 + pb::CodedOutputStream.ComputeInt64Size(FrequencyOffset);
          }
          if (Snr != 0F) {
            size += 1 + 4;
          }
          if (EncryptedTime.Length != 0) {
            size += 1 + pb::CodedOutputStream.ComputeBytesSize(EncryptedTime);
          }
          if (FineTime != 0L) {
            size += 1 + pb::CodedOutputStream.ComputeInt64Size(FineTime);
          }
          if (_unknownFields != null) {
            size += _unknownFields.CalculateSize();
          }
          return size;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void MergeFrom(Antenna other) {
          if (other == null) {
            return;
          }
          if (other.Antenna_ != 0) {
            Antenna_ = other.Antenna_;
          }
          if (other.Channel != 0) {
            Channel = other.Channel;
          }
          if (other.Rssi != 0F) {
            Rssi = other.Rssi;
          }
          if (other.ChannelRssi != 0F) {
            ChannelRssi = other.ChannelRssi;
          }
          if (other.RssiStandardDeviation != 0F) {
            RssiStandardDeviation = other.RssiStandardDeviation;
          }
          if (other.FrequencyOffset != 0L) {
            FrequencyOffset = other.FrequencyOffset;
          }
          if (other.Snr != 0F) {
            Snr = other.Snr;
          }
          if (other.EncryptedTime.Length != 0) {
            EncryptedTime = other.EncryptedTime;
          }
          if (other.FineTime != 0L) {
            FineTime = other.FineTime;
          }
          _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void MergeFrom(pb::CodedInputStream input) {
          uint tag;
          while ((tag = input.ReadTag()) != 0) {
            switch(tag) {
              default:
                _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
                break;
              case 8: {
                Antenna_ = input.ReadUInt32();
                break;
              }
              case 16: {
                Channel = input.ReadUInt32();
                break;
              }
              case 29: {
                Rssi = input.ReadFloat();
                break;
              }
              case 37: {
                Snr = input.ReadFloat();
                break;
              }
              case 45: {
                ChannelRssi = input.ReadFloat();
                break;
              }
              case 53: {
                RssiStandardDeviation = input.ReadFloat();
                break;
              }
              case 56: {
                FrequencyOffset = input.ReadInt64();
                break;
              }
              case 82: {
                EncryptedTime = input.ReadBytes();
                break;
              }
              case 88: {
                FineTime = input.ReadInt64();
                break;
              }
            }
          }
        }

      }

    }
    #endregion

  }

  public sealed partial class TxConfiguration : pb::IMessage<TxConfiguration> {
    private static readonly pb::MessageParser<TxConfiguration> _parser = new pb::MessageParser<TxConfiguration>(() => new TxConfiguration());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<TxConfiguration> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::TheThingsNetwork.API.Gateway.GatewayReflection.Descriptor.MessageTypes[2]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public TxConfiguration() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public TxConfiguration(TxConfiguration other) : this() {
      timestamp_ = other.timestamp_;
      rfChain_ = other.rfChain_;
      frequency_ = other.frequency_;
      power_ = other.power_;
      polarizationInversion_ = other.polarizationInversion_;
      frequencyDeviation_ = other.frequencyDeviation_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public TxConfiguration Clone() {
      return new TxConfiguration(this);
    }

    /// <summary>Field number for the "timestamp" field.</summary>
    public const int TimestampFieldNumber = 11;
    private uint timestamp_;
    /// <summary>
    /// Timestamp (uptime of LoRa module) in microseconds with rollover
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint Timestamp {
      get { return timestamp_; }
      set {
        timestamp_ = value;
      }
    }

    /// <summary>Field number for the "rf_chain" field.</summary>
    public const int RfChainFieldNumber = 21;
    private uint rfChain_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint RfChain {
      get { return rfChain_; }
      set {
        rfChain_ = value;
      }
    }

    /// <summary>Field number for the "frequency" field.</summary>
    public const int FrequencyFieldNumber = 22;
    private ulong frequency_;
    /// <summary>
    /// Frequency in Hz
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ulong Frequency {
      get { return frequency_; }
      set {
        frequency_ = value;
      }
    }

    /// <summary>Field number for the "power" field.</summary>
    public const int PowerFieldNumber = 23;
    private int power_;
    /// <summary>
    /// Transmit power in dBm
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Power {
      get { return power_; }
      set {
        power_ = value;
      }
    }

    /// <summary>Field number for the "polarization_inversion" field.</summary>
    public const int PolarizationInversionFieldNumber = 31;
    private bool polarizationInversion_;
    /// <summary>
    /// LoRa polarization inversion (basically always true for messages from gateway to node)
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool PolarizationInversion {
      get { return polarizationInversion_; }
      set {
        polarizationInversion_ = value;
      }
    }

    /// <summary>Field number for the "frequency_deviation" field.</summary>
    public const int FrequencyDeviationFieldNumber = 32;
    private uint frequencyDeviation_;
    /// <summary>
    /// FSK frequency deviation in Hz
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint FrequencyDeviation {
      get { return frequencyDeviation_; }
      set {
        frequencyDeviation_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as TxConfiguration);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(TxConfiguration other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Timestamp != other.Timestamp) return false;
      if (RfChain != other.RfChain) return false;
      if (Frequency != other.Frequency) return false;
      if (Power != other.Power) return false;
      if (PolarizationInversion != other.PolarizationInversion) return false;
      if (FrequencyDeviation != other.FrequencyDeviation) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Timestamp != 0) hash ^= Timestamp.GetHashCode();
      if (RfChain != 0) hash ^= RfChain.GetHashCode();
      if (Frequency != 0UL) hash ^= Frequency.GetHashCode();
      if (Power != 0) hash ^= Power.GetHashCode();
      if (PolarizationInversion != false) hash ^= PolarizationInversion.GetHashCode();
      if (FrequencyDeviation != 0) hash ^= FrequencyDeviation.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Timestamp != 0) {
        output.WriteRawTag(88);
        output.WriteUInt32(Timestamp);
      }
      if (RfChain != 0) {
        output.WriteRawTag(168, 1);
        output.WriteUInt32(RfChain);
      }
      if (Frequency != 0UL) {
        output.WriteRawTag(176, 1);
        output.WriteUInt64(Frequency);
      }
      if (Power != 0) {
        output.WriteRawTag(184, 1);
        output.WriteInt32(Power);
      }
      if (PolarizationInversion != false) {
        output.WriteRawTag(248, 1);
        output.WriteBool(PolarizationInversion);
      }
      if (FrequencyDeviation != 0) {
        output.WriteRawTag(128, 2);
        output.WriteUInt32(FrequencyDeviation);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Timestamp != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(Timestamp);
      }
      if (RfChain != 0) {
        size += 2 + pb::CodedOutputStream.ComputeUInt32Size(RfChain);
      }
      if (Frequency != 0UL) {
        size += 2 + pb::CodedOutputStream.ComputeUInt64Size(Frequency);
      }
      if (Power != 0) {
        size += 2 + pb::CodedOutputStream.ComputeInt32Size(Power);
      }
      if (PolarizationInversion != false) {
        size += 2 + 1;
      }
      if (FrequencyDeviation != 0) {
        size += 2 + pb::CodedOutputStream.ComputeUInt32Size(FrequencyDeviation);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(TxConfiguration other) {
      if (other == null) {
        return;
      }
      if (other.Timestamp != 0) {
        Timestamp = other.Timestamp;
      }
      if (other.RfChain != 0) {
        RfChain = other.RfChain;
      }
      if (other.Frequency != 0UL) {
        Frequency = other.Frequency;
      }
      if (other.Power != 0) {
        Power = other.Power;
      }
      if (other.PolarizationInversion != false) {
        PolarizationInversion = other.PolarizationInversion;
      }
      if (other.FrequencyDeviation != 0) {
        FrequencyDeviation = other.FrequencyDeviation;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 88: {
            Timestamp = input.ReadUInt32();
            break;
          }
          case 168: {
            RfChain = input.ReadUInt32();
            break;
          }
          case 176: {
            Frequency = input.ReadUInt64();
            break;
          }
          case 184: {
            Power = input.ReadInt32();
            break;
          }
          case 248: {
            PolarizationInversion = input.ReadBool();
            break;
          }
          case 256: {
            FrequencyDeviation = input.ReadUInt32();
            break;
          }
        }
      }
    }

  }

  /// <summary>
  /// message Status represents a status update from a Gateway.
  /// </summary>
  public sealed partial class Status : pb::IMessage<Status> {
    private static readonly pb::MessageParser<Status> _parser = new pb::MessageParser<Status>(() => new Status());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<Status> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::TheThingsNetwork.API.Gateway.GatewayReflection.Descriptor.MessageTypes[3]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Status() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Status(Status other) : this() {
      timestamp_ = other.timestamp_;
      time_ = other.time_;
      gatewayTrusted_ = other.gatewayTrusted_;
      bootTime_ = other.bootTime_;
      ip_ = other.ip_.Clone();
      platform_ = other.platform_;
      contactEmail_ = other.contactEmail_;
      description_ = other.description_;
      frequencyPlan_ = other.frequencyPlan_;
      bridge_ = other.bridge_;
      router_ = other.router_;
      fpga_ = other.fpga_;
      dsp_ = other.dsp_;
      hal_ = other.hal_;
      location_ = other.location_ != null ? other.location_.Clone() : null;
      rtt_ = other.rtt_;
      rxIn_ = other.rxIn_;
      rxOk_ = other.rxOk_;
      txIn_ = other.txIn_;
      txOk_ = other.txOk_;
      lmOk_ = other.lmOk_;
      lmSt_ = other.lmSt_;
      lmNw_ = other.lmNw_;
      lPps_ = other.lPps_;
      os_ = other.os_ != null ? other.os_.Clone() : null;
      messages_ = other.messages_.Clone();
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Status Clone() {
      return new Status(this);
    }

    /// <summary>Field number for the "timestamp" field.</summary>
    public const int TimestampFieldNumber = 1;
    private uint timestamp_;
    /// <summary>
    /// Timestamp (uptime of gateway) in microseconds with rollover
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint Timestamp {
      get { return timestamp_; }
      set {
        timestamp_ = value;
      }
    }

    /// <summary>Field number for the "time" field.</summary>
    public const int TimeFieldNumber = 2;
    private long time_;
    /// <summary>
    /// Time in Unix nanoseconds
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public long Time {
      get { return time_; }
      set {
        time_ = value;
      }
    }

    /// <summary>Field number for the "gateway_trusted" field.</summary>
    public const int GatewayTrustedFieldNumber = 3;
    private bool gatewayTrusted_;
    /// <summary>
    /// Indicates whether the gateway is trusted. Components that are able to verify gateway trust MUST do so and set this value accordingly
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool GatewayTrusted {
      get { return gatewayTrusted_; }
      set {
        gatewayTrusted_ = value;
      }
    }

    /// <summary>Field number for the "boot_time" field.</summary>
    public const int BootTimeFieldNumber = 4;
    private long bootTime_;
    /// <summary>
    /// Boot time in Unix nanoseconds
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public long BootTime {
      get { return bootTime_; }
      set {
        bootTime_ = value;
      }
    }

    /// <summary>Field number for the "ip" field.</summary>
    public const int IpFieldNumber = 11;
    private static readonly pb::FieldCodec<string> _repeated_ip_codec
        = pb::FieldCodec.ForString(90);
    private readonly pbc::RepeatedField<string> ip_ = new pbc::RepeatedField<string>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<string> Ip {
      get { return ip_; }
    }

    /// <summary>Field number for the "platform" field.</summary>
    public const int PlatformFieldNumber = 12;
    private string platform_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Platform {
      get { return platform_; }
      set {
        platform_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "contact_email" field.</summary>
    public const int ContactEmailFieldNumber = 13;
    private string contactEmail_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string ContactEmail {
      get { return contactEmail_; }
      set {
        contactEmail_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "description" field.</summary>
    public const int DescriptionFieldNumber = 14;
    private string description_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Description {
      get { return description_; }
      set {
        description_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "frequency_plan" field.</summary>
    public const int FrequencyPlanFieldNumber = 15;
    private string frequencyPlan_ = "";
    /// <summary>
    /// The gateway's frequency plan: one of EU_863_870, US_902_928, CN_779_787, EU_433, AU_915_928, CN_470_510, AS_923, AS_920_923, AS_923_925, KR_920_923
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string FrequencyPlan {
      get { return frequencyPlan_; }
      set {
        frequencyPlan_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "bridge" field.</summary>
    public const int BridgeFieldNumber = 16;
    private string bridge_ = "";
    /// <summary>
    /// The value of Bridge is set by the Bridge
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Bridge {
      get { return bridge_; }
      set {
        bridge_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "router" field.</summary>
    public const int RouterFieldNumber = 17;
    private string router_ = "";
    /// <summary>
    /// The value of Router is set by the Router
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Router {
      get { return router_; }
      set {
        router_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "fpga" field.</summary>
    public const int FpgaFieldNumber = 18;
    private uint fpga_;
    /// <summary>
    /// Version of Gateway FPGA
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint Fpga {
      get { return fpga_; }
      set {
        fpga_ = value;
      }
    }

    /// <summary>Field number for the "dsp" field.</summary>
    public const int DspFieldNumber = 19;
    private uint dsp_;
    /// <summary>
    /// Version of Gateway DSP software
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint Dsp {
      get { return dsp_; }
      set {
        dsp_ = value;
      }
    }

    /// <summary>Field number for the "hal" field.</summary>
    public const int HalFieldNumber = 20;
    private string hal_ = "";
    /// <summary>
    /// Version of gateway driver (in X.X.X format)
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Hal {
      get { return hal_; }
      set {
        hal_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "location" field.</summary>
    public const int LocationFieldNumber = 21;
    private global::TheThingsNetwork.API.Gateway.LocationMetadata location_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::TheThingsNetwork.API.Gateway.LocationMetadata Location {
      get { return location_; }
      set {
        location_ = value;
      }
    }

    /// <summary>Field number for the "rtt" field.</summary>
    public const int RttFieldNumber = 31;
    private uint rtt_;
    /// <summary>
    /// Round-trip time to the server in milliseconds
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint Rtt {
      get { return rtt_; }
      set {
        rtt_ = value;
      }
    }

    /// <summary>Field number for the "rx_in" field.</summary>
    public const int RxInFieldNumber = 41;
    private uint rxIn_;
    /// <summary>
    /// Total number of received uplink packets since boot
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint RxIn {
      get { return rxIn_; }
      set {
        rxIn_ = value;
      }
    }

    /// <summary>Field number for the "rx_ok" field.</summary>
    public const int RxOkFieldNumber = 42;
    private uint rxOk_;
    /// <summary>
    /// Total number of successful (correct) uplink packets since boot
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint RxOk {
      get { return rxOk_; }
      set {
        rxOk_ = value;
      }
    }

    /// <summary>Field number for the "tx_in" field.</summary>
    public const int TxInFieldNumber = 43;
    private uint txIn_;
    /// <summary>
    /// Total number of received downlink packets since boot
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint TxIn {
      get { return txIn_; }
      set {
        txIn_ = value;
      }
    }

    /// <summary>Field number for the "tx_ok" field.</summary>
    public const int TxOkFieldNumber = 44;
    private uint txOk_;
    /// <summary>
    /// Total number of successfully sent downlink packets since boot
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint TxOk {
      get { return txOk_; }
      set {
        txOk_ = value;
      }
    }

    /// <summary>Field number for the "lm_ok" field.</summary>
    public const int LmOkFieldNumber = 45;
    private uint lmOk_;
    /// <summary>
    /// Total number of packets received from link testing mote, with CRC OK
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint LmOk {
      get { return lmOk_; }
      set {
        lmOk_ = value;
      }
    }

    /// <summary>Field number for the "lm_st" field.</summary>
    public const int LmStFieldNumber = 46;
    private uint lmSt_;
    /// <summary>
    /// Sequence number of the first packet received from the link testing mote
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint LmSt {
      get { return lmSt_; }
      set {
        lmSt_ = value;
      }
    }

    /// <summary>Field number for the "lm_nw" field.</summary>
    public const int LmNwFieldNumber = 47;
    private uint lmNw_;
    /// <summary>
    /// Sequence number of the last packet received from the link testing mote
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint LmNw {
      get { return lmNw_; }
      set {
        lmNw_ = value;
      }
    }

    /// <summary>Field number for the "l_pps" field.</summary>
    public const int LPpsFieldNumber = 48;
    private uint lPps_;
    /// <summary>
    /// Number of lost PPS pulses
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint LPps {
      get { return lPps_; }
      set {
        lPps_ = value;
      }
    }

    /// <summary>Field number for the "os" field.</summary>
    public const int OsFieldNumber = 51;
    private global::TheThingsNetwork.API.Gateway.Status.Types.OSMetrics os_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::TheThingsNetwork.API.Gateway.Status.Types.OSMetrics Os {
      get { return os_; }
      set {
        os_ = value;
      }
    }

    /// <summary>Field number for the "messages" field.</summary>
    public const int MessagesFieldNumber = 52;
    private static readonly pb::FieldCodec<string> _repeated_messages_codec
        = pb::FieldCodec.ForString(418);
    private readonly pbc::RepeatedField<string> messages_ = new pbc::RepeatedField<string>();
    /// <summary>
    /// debug or warning messages from the gateway
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<string> Messages {
      get { return messages_; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as Status);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(Status other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Timestamp != other.Timestamp) return false;
      if (Time != other.Time) return false;
      if (GatewayTrusted != other.GatewayTrusted) return false;
      if (BootTime != other.BootTime) return false;
      if(!ip_.Equals(other.ip_)) return false;
      if (Platform != other.Platform) return false;
      if (ContactEmail != other.ContactEmail) return false;
      if (Description != other.Description) return false;
      if (FrequencyPlan != other.FrequencyPlan) return false;
      if (Bridge != other.Bridge) return false;
      if (Router != other.Router) return false;
      if (Fpga != other.Fpga) return false;
      if (Dsp != other.Dsp) return false;
      if (Hal != other.Hal) return false;
      if (!object.Equals(Location, other.Location)) return false;
      if (Rtt != other.Rtt) return false;
      if (RxIn != other.RxIn) return false;
      if (RxOk != other.RxOk) return false;
      if (TxIn != other.TxIn) return false;
      if (TxOk != other.TxOk) return false;
      if (LmOk != other.LmOk) return false;
      if (LmSt != other.LmSt) return false;
      if (LmNw != other.LmNw) return false;
      if (LPps != other.LPps) return false;
      if (!object.Equals(Os, other.Os)) return false;
      if(!messages_.Equals(other.messages_)) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Timestamp != 0) hash ^= Timestamp.GetHashCode();
      if (Time != 0L) hash ^= Time.GetHashCode();
      if (GatewayTrusted != false) hash ^= GatewayTrusted.GetHashCode();
      if (BootTime != 0L) hash ^= BootTime.GetHashCode();
      hash ^= ip_.GetHashCode();
      if (Platform.Length != 0) hash ^= Platform.GetHashCode();
      if (ContactEmail.Length != 0) hash ^= ContactEmail.GetHashCode();
      if (Description.Length != 0) hash ^= Description.GetHashCode();
      if (FrequencyPlan.Length != 0) hash ^= FrequencyPlan.GetHashCode();
      if (Bridge.Length != 0) hash ^= Bridge.GetHashCode();
      if (Router.Length != 0) hash ^= Router.GetHashCode();
      if (Fpga != 0) hash ^= Fpga.GetHashCode();
      if (Dsp != 0) hash ^= Dsp.GetHashCode();
      if (Hal.Length != 0) hash ^= Hal.GetHashCode();
      if (location_ != null) hash ^= Location.GetHashCode();
      if (Rtt != 0) hash ^= Rtt.GetHashCode();
      if (RxIn != 0) hash ^= RxIn.GetHashCode();
      if (RxOk != 0) hash ^= RxOk.GetHashCode();
      if (TxIn != 0) hash ^= TxIn.GetHashCode();
      if (TxOk != 0) hash ^= TxOk.GetHashCode();
      if (LmOk != 0) hash ^= LmOk.GetHashCode();
      if (LmSt != 0) hash ^= LmSt.GetHashCode();
      if (LmNw != 0) hash ^= LmNw.GetHashCode();
      if (LPps != 0) hash ^= LPps.GetHashCode();
      if (os_ != null) hash ^= Os.GetHashCode();
      hash ^= messages_.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Timestamp != 0) {
        output.WriteRawTag(8);
        output.WriteUInt32(Timestamp);
      }
      if (Time != 0L) {
        output.WriteRawTag(16);
        output.WriteInt64(Time);
      }
      if (GatewayTrusted != false) {
        output.WriteRawTag(24);
        output.WriteBool(GatewayTrusted);
      }
      if (BootTime != 0L) {
        output.WriteRawTag(32);
        output.WriteInt64(BootTime);
      }
      ip_.WriteTo(output, _repeated_ip_codec);
      if (Platform.Length != 0) {
        output.WriteRawTag(98);
        output.WriteString(Platform);
      }
      if (ContactEmail.Length != 0) {
        output.WriteRawTag(106);
        output.WriteString(ContactEmail);
      }
      if (Description.Length != 0) {
        output.WriteRawTag(114);
        output.WriteString(Description);
      }
      if (FrequencyPlan.Length != 0) {
        output.WriteRawTag(122);
        output.WriteString(FrequencyPlan);
      }
      if (Bridge.Length != 0) {
        output.WriteRawTag(130, 1);
        output.WriteString(Bridge);
      }
      if (Router.Length != 0) {
        output.WriteRawTag(138, 1);
        output.WriteString(Router);
      }
      if (Fpga != 0) {
        output.WriteRawTag(144, 1);
        output.WriteUInt32(Fpga);
      }
      if (Dsp != 0) {
        output.WriteRawTag(152, 1);
        output.WriteUInt32(Dsp);
      }
      if (Hal.Length != 0) {
        output.WriteRawTag(162, 1);
        output.WriteString(Hal);
      }
      if (location_ != null) {
        output.WriteRawTag(170, 1);
        output.WriteMessage(Location);
      }
      if (Rtt != 0) {
        output.WriteRawTag(248, 1);
        output.WriteUInt32(Rtt);
      }
      if (RxIn != 0) {
        output.WriteRawTag(200, 2);
        output.WriteUInt32(RxIn);
      }
      if (RxOk != 0) {
        output.WriteRawTag(208, 2);
        output.WriteUInt32(RxOk);
      }
      if (TxIn != 0) {
        output.WriteRawTag(216, 2);
        output.WriteUInt32(TxIn);
      }
      if (TxOk != 0) {
        output.WriteRawTag(224, 2);
        output.WriteUInt32(TxOk);
      }
      if (LmOk != 0) {
        output.WriteRawTag(232, 2);
        output.WriteUInt32(LmOk);
      }
      if (LmSt != 0) {
        output.WriteRawTag(240, 2);
        output.WriteUInt32(LmSt);
      }
      if (LmNw != 0) {
        output.WriteRawTag(248, 2);
        output.WriteUInt32(LmNw);
      }
      if (LPps != 0) {
        output.WriteRawTag(128, 3);
        output.WriteUInt32(LPps);
      }
      if (os_ != null) {
        output.WriteRawTag(154, 3);
        output.WriteMessage(Os);
      }
      messages_.WriteTo(output, _repeated_messages_codec);
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Timestamp != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(Timestamp);
      }
      if (Time != 0L) {
        size += 1 + pb::CodedOutputStream.ComputeInt64Size(Time);
      }
      if (GatewayTrusted != false) {
        size += 1 + 1;
      }
      if (BootTime != 0L) {
        size += 1 + pb::CodedOutputStream.ComputeInt64Size(BootTime);
      }
      size += ip_.CalculateSize(_repeated_ip_codec);
      if (Platform.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Platform);
      }
      if (ContactEmail.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(ContactEmail);
      }
      if (Description.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Description);
      }
      if (FrequencyPlan.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(FrequencyPlan);
      }
      if (Bridge.Length != 0) {
        size += 2 + pb::CodedOutputStream.ComputeStringSize(Bridge);
      }
      if (Router.Length != 0) {
        size += 2 + pb::CodedOutputStream.ComputeStringSize(Router);
      }
      if (Fpga != 0) {
        size += 2 + pb::CodedOutputStream.ComputeUInt32Size(Fpga);
      }
      if (Dsp != 0) {
        size += 2 + pb::CodedOutputStream.ComputeUInt32Size(Dsp);
      }
      if (Hal.Length != 0) {
        size += 2 + pb::CodedOutputStream.ComputeStringSize(Hal);
      }
      if (location_ != null) {
        size += 2 + pb::CodedOutputStream.ComputeMessageSize(Location);
      }
      if (Rtt != 0) {
        size += 2 + pb::CodedOutputStream.ComputeUInt32Size(Rtt);
      }
      if (RxIn != 0) {
        size += 2 + pb::CodedOutputStream.ComputeUInt32Size(RxIn);
      }
      if (RxOk != 0) {
        size += 2 + pb::CodedOutputStream.ComputeUInt32Size(RxOk);
      }
      if (TxIn != 0) {
        size += 2 + pb::CodedOutputStream.ComputeUInt32Size(TxIn);
      }
      if (TxOk != 0) {
        size += 2 + pb::CodedOutputStream.ComputeUInt32Size(TxOk);
      }
      if (LmOk != 0) {
        size += 2 + pb::CodedOutputStream.ComputeUInt32Size(LmOk);
      }
      if (LmSt != 0) {
        size += 2 + pb::CodedOutputStream.ComputeUInt32Size(LmSt);
      }
      if (LmNw != 0) {
        size += 2 + pb::CodedOutputStream.ComputeUInt32Size(LmNw);
      }
      if (LPps != 0) {
        size += 2 + pb::CodedOutputStream.ComputeUInt32Size(LPps);
      }
      if (os_ != null) {
        size += 2 + pb::CodedOutputStream.ComputeMessageSize(Os);
      }
      size += messages_.CalculateSize(_repeated_messages_codec);
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(Status other) {
      if (other == null) {
        return;
      }
      if (other.Timestamp != 0) {
        Timestamp = other.Timestamp;
      }
      if (other.Time != 0L) {
        Time = other.Time;
      }
      if (other.GatewayTrusted != false) {
        GatewayTrusted = other.GatewayTrusted;
      }
      if (other.BootTime != 0L) {
        BootTime = other.BootTime;
      }
      ip_.Add(other.ip_);
      if (other.Platform.Length != 0) {
        Platform = other.Platform;
      }
      if (other.ContactEmail.Length != 0) {
        ContactEmail = other.ContactEmail;
      }
      if (other.Description.Length != 0) {
        Description = other.Description;
      }
      if (other.FrequencyPlan.Length != 0) {
        FrequencyPlan = other.FrequencyPlan;
      }
      if (other.Bridge.Length != 0) {
        Bridge = other.Bridge;
      }
      if (other.Router.Length != 0) {
        Router = other.Router;
      }
      if (other.Fpga != 0) {
        Fpga = other.Fpga;
      }
      if (other.Dsp != 0) {
        Dsp = other.Dsp;
      }
      if (other.Hal.Length != 0) {
        Hal = other.Hal;
      }
      if (other.location_ != null) {
        if (location_ == null) {
          Location = new global::TheThingsNetwork.API.Gateway.LocationMetadata();
        }
        Location.MergeFrom(other.Location);
      }
      if (other.Rtt != 0) {
        Rtt = other.Rtt;
      }
      if (other.RxIn != 0) {
        RxIn = other.RxIn;
      }
      if (other.RxOk != 0) {
        RxOk = other.RxOk;
      }
      if (other.TxIn != 0) {
        TxIn = other.TxIn;
      }
      if (other.TxOk != 0) {
        TxOk = other.TxOk;
      }
      if (other.LmOk != 0) {
        LmOk = other.LmOk;
      }
      if (other.LmSt != 0) {
        LmSt = other.LmSt;
      }
      if (other.LmNw != 0) {
        LmNw = other.LmNw;
      }
      if (other.LPps != 0) {
        LPps = other.LPps;
      }
      if (other.os_ != null) {
        if (os_ == null) {
          Os = new global::TheThingsNetwork.API.Gateway.Status.Types.OSMetrics();
        }
        Os.MergeFrom(other.Os);
      }
      messages_.Add(other.messages_);
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            Timestamp = input.ReadUInt32();
            break;
          }
          case 16: {
            Time = input.ReadInt64();
            break;
          }
          case 24: {
            GatewayTrusted = input.ReadBool();
            break;
          }
          case 32: {
            BootTime = input.ReadInt64();
            break;
          }
          case 90: {
            ip_.AddEntriesFrom(input, _repeated_ip_codec);
            break;
          }
          case 98: {
            Platform = input.ReadString();
            break;
          }
          case 106: {
            ContactEmail = input.ReadString();
            break;
          }
          case 114: {
            Description = input.ReadString();
            break;
          }
          case 122: {
            FrequencyPlan = input.ReadString();
            break;
          }
          case 130: {
            Bridge = input.ReadString();
            break;
          }
          case 138: {
            Router = input.ReadString();
            break;
          }
          case 144: {
            Fpga = input.ReadUInt32();
            break;
          }
          case 152: {
            Dsp = input.ReadUInt32();
            break;
          }
          case 162: {
            Hal = input.ReadString();
            break;
          }
          case 170: {
            if (location_ == null) {
              Location = new global::TheThingsNetwork.API.Gateway.LocationMetadata();
            }
            input.ReadMessage(Location);
            break;
          }
          case 248: {
            Rtt = input.ReadUInt32();
            break;
          }
          case 328: {
            RxIn = input.ReadUInt32();
            break;
          }
          case 336: {
            RxOk = input.ReadUInt32();
            break;
          }
          case 344: {
            TxIn = input.ReadUInt32();
            break;
          }
          case 352: {
            TxOk = input.ReadUInt32();
            break;
          }
          case 360: {
            LmOk = input.ReadUInt32();
            break;
          }
          case 368: {
            LmSt = input.ReadUInt32();
            break;
          }
          case 376: {
            LmNw = input.ReadUInt32();
            break;
          }
          case 384: {
            LPps = input.ReadUInt32();
            break;
          }
          case 410: {
            if (os_ == null) {
              Os = new global::TheThingsNetwork.API.Gateway.Status.Types.OSMetrics();
            }
            input.ReadMessage(Os);
            break;
          }
          case 418: {
            messages_.AddEntriesFrom(input, _repeated_messages_codec);
            break;
          }
        }
      }
    }

    #region Nested types
    /// <summary>Container for nested types declared in the Status message type.</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static partial class Types {
      /// <summary>
      /// Additional metrics from the operating system
      /// </summary>
      public sealed partial class OSMetrics : pb::IMessage<OSMetrics> {
        private static readonly pb::MessageParser<OSMetrics> _parser = new pb::MessageParser<OSMetrics>(() => new OSMetrics());
        private pb::UnknownFieldSet _unknownFields;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public static pb::MessageParser<OSMetrics> Parser { get { return _parser; } }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public static pbr::MessageDescriptor Descriptor {
          get { return global::TheThingsNetwork.API.Gateway.Status.Descriptor.NestedTypes[0]; }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        pbr::MessageDescriptor pb::IMessage.Descriptor {
          get { return Descriptor; }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public OSMetrics() {
          OnConstruction();
        }

        partial void OnConstruction();

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public OSMetrics(OSMetrics other) : this() {
          load1_ = other.load1_;
          load5_ = other.load5_;
          load15_ = other.load15_;
          cpuPercentage_ = other.cpuPercentage_;
          memoryPercentage_ = other.memoryPercentage_;
          temperature_ = other.temperature_;
          _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public OSMetrics Clone() {
          return new OSMetrics(this);
        }

        /// <summary>Field number for the "load_1" field.</summary>
        public const int Load1FieldNumber = 1;
        private float load1_;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public float Load1 {
          get { return load1_; }
          set {
            load1_ = value;
          }
        }

        /// <summary>Field number for the "load_5" field.</summary>
        public const int Load5FieldNumber = 2;
        private float load5_;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public float Load5 {
          get { return load5_; }
          set {
            load5_ = value;
          }
        }

        /// <summary>Field number for the "load_15" field.</summary>
        public const int Load15FieldNumber = 3;
        private float load15_;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public float Load15 {
          get { return load15_; }
          set {
            load15_ = value;
          }
        }

        /// <summary>Field number for the "cpu_percentage" field.</summary>
        public const int CpuPercentageFieldNumber = 11;
        private float cpuPercentage_;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public float CpuPercentage {
          get { return cpuPercentage_; }
          set {
            cpuPercentage_ = value;
          }
        }

        /// <summary>Field number for the "memory_percentage" field.</summary>
        public const int MemoryPercentageFieldNumber = 21;
        private float memoryPercentage_;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public float MemoryPercentage {
          get { return memoryPercentage_; }
          set {
            memoryPercentage_ = value;
          }
        }

        /// <summary>Field number for the "temperature" field.</summary>
        public const int TemperatureFieldNumber = 31;
        private float temperature_;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public float Temperature {
          get { return temperature_; }
          set {
            temperature_ = value;
          }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override bool Equals(object other) {
          return Equals(other as OSMetrics);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public bool Equals(OSMetrics other) {
          if (ReferenceEquals(other, null)) {
            return false;
          }
          if (ReferenceEquals(other, this)) {
            return true;
          }
          if (!pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.Equals(Load1, other.Load1)) return false;
          if (!pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.Equals(Load5, other.Load5)) return false;
          if (!pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.Equals(Load15, other.Load15)) return false;
          if (!pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.Equals(CpuPercentage, other.CpuPercentage)) return false;
          if (!pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.Equals(MemoryPercentage, other.MemoryPercentage)) return false;
          if (!pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.Equals(Temperature, other.Temperature)) return false;
          return Equals(_unknownFields, other._unknownFields);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override int GetHashCode() {
          int hash = 1;
          if (Load1 != 0F) hash ^= pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.GetHashCode(Load1);
          if (Load5 != 0F) hash ^= pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.GetHashCode(Load5);
          if (Load15 != 0F) hash ^= pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.GetHashCode(Load15);
          if (CpuPercentage != 0F) hash ^= pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.GetHashCode(CpuPercentage);
          if (MemoryPercentage != 0F) hash ^= pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.GetHashCode(MemoryPercentage);
          if (Temperature != 0F) hash ^= pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.GetHashCode(Temperature);
          if (_unknownFields != null) {
            hash ^= _unknownFields.GetHashCode();
          }
          return hash;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override string ToString() {
          return pb::JsonFormatter.ToDiagnosticString(this);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void WriteTo(pb::CodedOutputStream output) {
          if (Load1 != 0F) {
            output.WriteRawTag(13);
            output.WriteFloat(Load1);
          }
          if (Load5 != 0F) {
            output.WriteRawTag(21);
            output.WriteFloat(Load5);
          }
          if (Load15 != 0F) {
            output.WriteRawTag(29);
            output.WriteFloat(Load15);
          }
          if (CpuPercentage != 0F) {
            output.WriteRawTag(93);
            output.WriteFloat(CpuPercentage);
          }
          if (MemoryPercentage != 0F) {
            output.WriteRawTag(173, 1);
            output.WriteFloat(MemoryPercentage);
          }
          if (Temperature != 0F) {
            output.WriteRawTag(253, 1);
            output.WriteFloat(Temperature);
          }
          if (_unknownFields != null) {
            _unknownFields.WriteTo(output);
          }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public int CalculateSize() {
          int size = 0;
          if (Load1 != 0F) {
            size += 1 + 4;
          }
          if (Load5 != 0F) {
            size += 1 + 4;
          }
          if (Load15 != 0F) {
            size += 1 + 4;
          }
          if (CpuPercentage != 0F) {
            size += 1 + 4;
          }
          if (MemoryPercentage != 0F) {
            size += 2 + 4;
          }
          if (Temperature != 0F) {
            size += 2 + 4;
          }
          if (_unknownFields != null) {
            size += _unknownFields.CalculateSize();
          }
          return size;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void MergeFrom(OSMetrics other) {
          if (other == null) {
            return;
          }
          if (other.Load1 != 0F) {
            Load1 = other.Load1;
          }
          if (other.Load5 != 0F) {
            Load5 = other.Load5;
          }
          if (other.Load15 != 0F) {
            Load15 = other.Load15;
          }
          if (other.CpuPercentage != 0F) {
            CpuPercentage = other.CpuPercentage;
          }
          if (other.MemoryPercentage != 0F) {
            MemoryPercentage = other.MemoryPercentage;
          }
          if (other.Temperature != 0F) {
            Temperature = other.Temperature;
          }
          _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void MergeFrom(pb::CodedInputStream input) {
          uint tag;
          while ((tag = input.ReadTag()) != 0) {
            switch(tag) {
              default:
                _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
                break;
              case 13: {
                Load1 = input.ReadFloat();
                break;
              }
              case 21: {
                Load5 = input.ReadFloat();
                break;
              }
              case 29: {
                Load15 = input.ReadFloat();
                break;
              }
              case 93: {
                CpuPercentage = input.ReadFloat();
                break;
              }
              case 173: {
                MemoryPercentage = input.ReadFloat();
                break;
              }
              case 253: {
                Temperature = input.ReadFloat();
                break;
              }
            }
          }
        }

      }

    }
    #endregion

  }

  #endregion

}

#endregion Designer generated code
